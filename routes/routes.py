from fastapi import APIRouter, HTTPException, statusfrom app.models import Bookfrom app.db import get_connectionrouter = APIRouter()@router.get("/books/{book_id}")def get_book(book_id:int):    with get_connection() as con:        with con.cursor() as cur:            cur.execute("SELECT id, title, author, price FROM books WHERE id = %s", (book_id,))            row = cur.fetchone()            if not row:                raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Book not found")            return {"id": row[0], "title": row[1], "author": row[2]}@router.post("/books", status_code=status.HTTP_201_CREATED)def add_book(book: Book):    with get_connection() as con:        with con.cursor() as cur:            cur.execute(                "INSERT INTO books (title, author, price) VALUES (%s, %s, %s) RETURNING id",                (book.title, book.author, book.price),            )            new_id = cur.fetchone()[0]            con.commit()            return {"message": "Book added", "book": {"id": new_id, **book.dict()}}@router.delete("/books/{book_id}", status_code=status.HTTP_204_NO_CONTENT)def delete_book(book_id: int):    with get_connection() as con:        with con.cursor() as cur:            cur.execute("DELETE FROM books WHERE id = %s RETURNING id", (book_id,))            result = cur.fetchone()            if not result:                raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Book not found")            con.commit()            return {"message": "Book deleted", "book": {"id": result[0], **result[1]}}@router.get("/books/{book_id}")def update_book(book_id: int):    with get_connection() as con:        with con.cursor() as cur:            cur.execute("SELECT 1 FROM books WHERE id = %s", (book_id,))            if not cur.fetchone():                raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Book not found")            cur.execute("""                UPDATE books SET title = %s, author = %s, price = %s WHERE id = %s            """, (updated_book.title, updated_book.author, updated_book.price, book_id))            con.commit()            return {"message": "Book updated", "book": {"id": book_id, **updated_book.dict()}}