from fastapi import APIRouter, HTTPException, statusfrom typing import Optionalfrom models import Bookfrom data import books, next_idrouter = APIRouter()@router.get("/books")def get_books(name: Optional[str] = None, max_price: Optional[float] = None, min_price: Optional[float] = None):    filtered_books = books    if name is not None:        filtered_books = [book for book in filtered_books if book ["name"].lower() == name.lower()]    if max_price is not None:        filtered_books = [book for book in filtered_books if book ["price"].lower() <= max_price]    if min_price is not None:        filtered_books = [book for book in filtered_books if book ["price"].lower() >= min_price]    if not filtered_books:        raise HTTPException(status_code=404, detail="No books found")    return filtered_books@router.post("/books")def add_book(book: Book):    global next_id    new_book = {        "id": next_id,        "name": book.name,        "price": book.price                }    next_id += 1    books.append(new_book) #   return {"message": "New book added", "book": new_book}    raise HTTPException(status_code=201, detail="successfully added new book")@router.delete("/books/{book_id}")def delete_book(book_id: int):    global next_id    for i, book in enumerate(books):        if book["id"] == book_id:            deleted_book = books.pop(i)            return {"message": "Book deleted", "book": deleted_book}    raise HTTPException(status_code = 404, detail = "Book not found")@router.get("/books/{book_id}")def get_book(book_id: int):    for book in books:        if book["id"] == book_id:            return book    raise HTTPException(status_code = 404, detail = "Book not found")@router.put("/books/{book_id}")def update_book(book_id: int, updated_book: Book):    for book in books:        if book["id"] == book_id:            book["name"] = updated_book.name            book["price"] = updated_book.price            return {"message ": "Book updated", "book": book}    raise HTTPException(status_code = 404, detail = "Book not found")